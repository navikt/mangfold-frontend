import { useEffect, useMemo, useState } from "react";
import { Heading, Label, Button, BodyShort } from "@navikt/ds-react";
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from "recharts";
import ReactSelect from "react-select";
import { generateDynamicAgeColors, extractUniqueAgeGroups, isMasked, getMaskedStyle, getMaskedValue } from "./utils/alderGruppeUtils";

// VIKTIG: Aldersgrupper skal alltid hentes dynamisk fra API-responsen og aldri hardkodes
// Dette gjelder alle komponenter som håndterer aldersdata

export default function StatistikkExplorerTab() {
  const [rawData, setRawData] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  const [selectedDepartments, setSelectedDepartments] = useState<string[]>([]);
  const [selectedSections, setSelectedSections] = useState<string[]>([]);
  const [selectedKjonn, setSelectedKjonn] = useState<string[]>([]);
  const [selectedAlder, setSelectedAlder] = useState<string[]>([]);
  const [selectedAnsiennitet, setSelectedAnsiennitet] = useState<string[]>([]);
  const [selectedLederniva, setSelectedLederniva] = useState<string[]>([]);
  const [selectedStilling, setSelectedStilling] = useState<string[]>([]);

  useEffect(() => {
    async function fetchData() {
      try {
        setLoading(true);
        const res = await fetch("https://mangfold-backend.intern.nav.no/ansatt-detaljer");
        const json = await res.json();
        setRawData(json);
      } catch (e) {
        console.error("Feil ved henting av data:", e);
      } finally {
        setLoading(false);
      }
    }
    fetchData();
  }, []);

  const distinct = (arr: any[]) =>
    Array.from(new Set(arr.map((val) => (typeof val === "string" ? val.trim() : "")).filter((v) => v)));

  const allDepartments = useMemo(() => distinct(rawData.map((d) => d.avdeling)), [rawData]);

  const sectionOptionsByDepartment = useMemo(() => {
    const map: Record<string, string[]> = {};
    rawData.forEach((d) => {
      if (d.avdeling && d.seksjon) {
        if (!map[d.avdeling]) map[d.avdeling] = [];
        if (!map[d.avdeling].includes(d.seksjon)) {
          map[d.avdeling].push(d.seksjon);
        }
      }
    });
    return map;
  }, [rawData]);

  const allOptions = useMemo(
    () => ({
      kjonn: distinct(rawData.map((d) => d.kjonn)),
      // VIKTIG: Hent aldersgrupper dynamisk i stedet for hardkoding
      alder: Array.from(
        new Set(rawData.map((d) => d.aldersgruppe).filter(Boolean))
      ).sort((a, b) => {
        // "Ukjent alder" skal alltid komme sist  
        if (a.includes("Ukjent") || a.includes("ukjent")) return 1;
        if (b.includes("Ukjent") || b.includes("ukjent")) return -1;
        
        // Prøv å sortere numerisk hvis mulig
        const aNum = parseInt(a.replace(/[^0-9]/g, ''));
        const bNum = parseInt(b.replace(/[^0-9]/g, ''));
        
        if (!isNaN(aNum) && !isNaN(bNum)) {
          return aNum - bNum;
        }
        
        // Fallback til alfabetisk sortering
        return a.localeCompare(b);
      }),
      ansiennitet: distinct(rawData.map((d) => d.ansiennitetsgruppe)),
      lederniva: distinct(rawData.map((d) => d.lederniva)),
      stilling: distinct(rawData.map((d) => d.stillingsnavn)),
    }),
    [rawData]
  );

  const filteredData = useMemo(() => {
    if (selectedDepartments.length === 0) return [];

    return rawData.filter((d) => {
      const matchesAvdeling = selectedDepartments.includes(d.avdeling);
      const matchesSeksjon = selectedSections.length === 0 || selectedSections.includes(d.seksjon);
      const matchesKjonn = selectedKjonn.length === 0 || selectedKjonn.includes(d.kjonn);
      const matchesAlder = selectedAlder.length === 0 || selectedAlder.includes(d.aldersgruppe);
      const matchesAnsiennitet = selectedAnsiennitet.length === 0 || selectedAnsiennitet.includes(d.ansiennitetsgruppe);
      const matchesLederniva = selectedLederniva.length === 0 || selectedLederniva.includes(d.lederniva);
      const matchesStilling = selectedStilling.length === 0 || selectedStilling.includes(d.stillingsnavn);

      return (
        matchesAvdeling &&
        matchesSeksjon &&
        matchesKjonn &&
        matchesAlder &&
        matchesAnsiennitet &&
        matchesLederniva &&
        matchesStilling
      );
    });
  }, [rawData, selectedDepartments, selectedSections, selectedKjonn, selectedAlder, selectedAnsiennitet, selectedLederniva, selectedStilling]);

  const chartData = useMemo(() => {
    const groupKey = selectedSections.length > 0 ? "seksjon" : "avdeling";

    // Hent alle grupper som burde vises – også de uten data etter filtrering
    const relevanteGrupper = selectedSections.length > 0
      ? selectedSections
      : selectedDepartments;

    const map = new Map<string, { gruppe: string; kvinne: number; mann: number; ukjent: number; total: number }>();

    // Sett opp alle grupper med 0-data
    relevanteGrupper.forEach((gruppe) => {
      map.set(gruppe, { gruppe, kvinne: 0, mann: 0, ukjent: 0, total: 0 });
    });

    // Legg til filtrert data i riktige grupper
    filteredData.forEach((d) => {
      const key = d[groupKey]?.trim() || "Ukjent";
      const kjonn = d.kjonn?.trim() || "Ukjent";
      const antall = d.antall ?? 0;
      
      // Sjekk for maskering (erMaskert kan komme fra API-data)
      const maskert = isMasked(d);

      if (!map.has(key)) {
        map.set(key, { gruppe: key, kvinne: 0, mann: 0, ukjent: 0, total: 0, erMaskert: maskert });
      }

      const entry = map.get(key)!;
      if (kjonn === "Kvinne") entry.kvinne += antall;
      else if (kjonn === "Mann") entry.mann += antall;
      else entry.ukjent += antall;

      entry.total += antall;
      entry.erMaskert = entry.erMaskert || maskert; // Hvis noen data er maskert, maska hele gruppen
    });

    // Gjør klart chart-data, inkludert tomme grupper
    return Array.from(map.values()).map(({ gruppe, kvinne, mann, ukjent, total, erMaskert }) => ({
      gruppe,
      kvinne: total > 0 ? (kvinne / total) * 100 : 0,
      mann: total > 0 ? (mann / total) * 100 : 0,
      ukjent: total > 0 ? (ukjent / total) * 100 : 0,
      harIngenData: total === 0,
      erMaskert: erMaskert || false, // Include masking status
    }));
  }, [filteredData, selectedDepartments, selectedSections]);


  const harValgteFilter = useMemo(
    () =>
      selectedDepartments.length > 0 ||
      selectedSections.length > 0 ||
      selectedKjonn.length > 0 ||
      selectedAlder.length > 0 ||
      selectedAnsiennitet.length > 0 ||
      selectedLederniva.length > 0 ||
      selectedStilling.length > 0,
    [selectedDepartments, selectedSections, selectedKjonn, selectedAlder, selectedAnsiennitet, selectedLederniva, selectedStilling]
  );

  const nullstillFilter = () => {
    setSelectedDepartments([]);
    setSelectedSections([]);
    setSelectedKjonn([]);
    setSelectedAlder([]);
    setSelectedAnsiennitet([]);
    setSelectedLederniva([]);
    setSelectedStilling([]);
  };

  const multiSelect = (
    label: string,
    options: string[],
    selected: string[],
    setSelected: (val: string[]) => void,
    noOptionsMessage?: string
  ) => (
    <div style={{ minWidth: "250px" }}>
      <Label style={{ display: "block", marginBottom: "0.25rem" }}>{label}</Label>
      <ReactSelect
        isMulti
        placeholder={`Velg ${label.toLowerCase()}...`}
        options={options.map((o) => ({ value: o, label: o }))}
        value={selected.map((o) => ({ value: o, label: o }))}
        onChange={(selectedOptions) => setSelected(selectedOptions.map((o) => o.value))}
        noOptionsMessage={() => noOptionsMessage || "Ingen alternativer"}
      />
    </div>
  );

  return (
    <div>
      <Heading level="2" size="medium">Statistikkfilter</Heading>

      <p style={{ marginBottom: "3rem" }}>
        Denne visningen gir deg oversikt over kjønnsfordeling i ulike grupper. Velg én avdeling for å starte. Når du har valgt en avdeling, kan du splitte opp visningen per seksjon ved å bruke seksjonsfilteret.
      </p>

      <div style={{ display: "flex", gap: "2rem", flexWrap: "wrap", marginBottom: "6rem", alignItems: "flex-end" }}>
        {multiSelect("Avdeling(er)", allDepartments, selectedDepartments, setSelectedDepartments)}

        {multiSelect(
          "Seksjon(er)",
          selectedDepartments.flatMap((dep) => sectionOptionsByDepartment[dep] || []),
          selectedSections,
          setSelectedSections,
          selectedDepartments.length === 0 ? "Velg avdeling(er) først..." : undefined
        )}

        {multiSelect("Kjønn", allOptions.kjonn, selectedKjonn, setSelectedKjonn)}
        {multiSelect("Alder", allOptions.alder, selectedAlder, setSelectedAlder)}
        {multiSelect("Ansiennitet", allOptions.ansiennitet, selectedAnsiennitet, setSelectedAnsiennitet)}
        {multiSelect("Ledernivå", allOptions.lederniva, selectedLederniva, setSelectedLederniva)}
        {multiSelect("Stilling", allOptions.stilling, selectedStilling, setSelectedStilling)}

        {harValgteFilter && (
          <div style={{ minWidth: "250px" }}>
            <Button variant="tertiary" onClick={nullstillFilter}>Nullstill filter</Button>
          </div>
        )}
      </div>

      {loading ? (
        <p>Laster data...</p>
      ) : selectedDepartments.length === 0 ? (
        <p style={{ marginTop: "2rem" }}>Vennligst velg én avdeling for å se statistikk.</p>
      ) : (
        <>
          {selectedDepartments.length > 0 && selectedSections.length === 0 && (
            <BodyShort style={{ marginBottom: "1rem" }}>
              Du kan splitte opp avdelingen i seksjoner ved å bruke seksjonsfilteret.
            </BodyShort>
          )}


          <ResponsiveContainer width="100%" height={400}>
            <BarChart data={chartData} margin={{ top: 20, right: 20, left: 20, bottom: 40 }}>
              <XAxis dataKey="gruppe" />
              <YAxis domain={[0, 100]} tickFormatter={(v) => `${v}%`} />
              <Tooltip 
                content={({ active, payload, label }) => {
                  if (!active || !payload || !payload.length) return null;
                  
                  const data = payload[0].payload;
                  const maskert = isMasked(data);
                  
                  return (
                    <div style={{ 
                      background: "#2d3748", 
                      color: "white", 
                      padding: "1rem", 
                      borderRadius: "0.5rem", 
                      fontSize: "14px",
                      ...getMaskedStyle(maskert)
                    }}>
                      <div style={{ fontWeight: 600, marginBottom: 8 }}>{label}</div>
                      {maskert && (
                        <div style={{ marginBottom: 8, fontStyle: "italic", color: "#cbd5e1" }}>
                          Data er maskert for denne gruppen
                        </div>
                      )}
                      {payload.map((entry, index) => (
                        <div key={index} style={{ marginBottom: 4 }}>
                          <span style={{ color: entry.color }}>■</span> {entry.name}: {getMaskedValue(entry.value, maskert)}%
                        </div>
                      ))}
                    </div>
                  );
                }}
              />
              <Bar 
                dataKey="kvinne" 
                stackId="a" 
                name="Kvinner" 
                fill="#339989"
              />
              <Bar 
                dataKey="mann" 
                stackId="a" 
                name="Menn" 
                fill="#232C3D"
              />
              <Bar 
                dataKey="ukjent" 
                stackId="a" 
                name="Ukjent" 
                fill="#D0D0D0"
              />
            </BarChart>
          </ResponsiveContainer>

          {chartData.some((d) => d.harIngenData) && (
            <div style={{ marginTop: "1rem" }}>
              <BodyShort>
                Følgende {selectedSections.length > 0 ? "seksjoner" : "avdelinger"} har ingen treff for gjeldende filter:{" "}
                {chartData.filter((d) => d.harIngenData).map((d) => d.gruppe).join(", ")}.
              </BodyShort>
            </div>
          )}

        </>
      )}
    </div>
  );
}
