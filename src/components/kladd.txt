import { useEffect, useMemo, useState } from "react";
import { Heading, Label, Button } from "@navikt/ds-react";
import { BarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer } from "recharts";
import ReactSelect from "react-select";

export default function StatistikkExplorerTab() {
  const [rawData, setRawData] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);

  const [selectedDepartments, setSelectedDepartments] = useState<string[]>([]);
  const [selectedSections, setSelectedSections] = useState<string[]>([]);
  const [selectedKjonn, setSelectedKjonn] = useState<string[]>([]);
  const [selectedAlder, setSelectedAlder] = useState<string[]>([]);
  const [selectedAnsiennitet, setSelectedAnsiennitet] = useState<string[]>([]);
  const [selectedLederniva, setSelectedLederniva] = useState<string[]>([]);
  const [selectedStilling, setSelectedStilling] = useState<string[]>([]);

  useEffect(() => {
    async function fetchData() {
      try {
        setLoading(true);
        const res = await fetch("https://mangfold-backend.intern.nav.no/ansatt-detaljer");
        const json = await res.json();
        setRawData(json);
      } catch (e) {
        console.error("Feil ved henting av data:", e);
      } finally {
        setLoading(false);
      }
    }
    fetchData();
  }, []);

  const distinct = (arr: any[]) =>
    Array.from(new Set(arr.map((val) => (typeof val === "string" ? val.trim() : "")).filter((v) => v)));

  const allDepartments = useMemo(() => distinct(rawData.map((d) => d.avdeling)), [rawData]);

  const sectionOptionsByDepartment = useMemo(() => {
    const map: Record<string, string[]> = {};
    rawData.forEach((d) => {
      if (d.avdeling && d.seksjon) {
        if (!map[d.avdeling]) map[d.avdeling] = [];
        if (!map[d.avdeling].includes(d.seksjon)) {
          map[d.avdeling].push(d.seksjon);
        }
      }
    });
    return map;
  }, [rawData]);

  const allOptions = useMemo(() => ({
    kjonn: distinct(rawData.map((d) => d.kjonn)),
    alder: distinct(rawData.map((d) => d.aldersgruppe)),
    ansiennitet: distinct(rawData.map((d) => d.ansiennitetsgruppe)),
    lederniva: distinct(rawData.map((d) => d.lederniva)),
    stilling: distinct(rawData.map((d) => d.stillingsnavn)),
  }), [rawData]);

  const filteredData = useMemo(() => {
    return rawData.filter((d) => {
      const matchesAvdeling = selectedDepartments.length === 0 || selectedDepartments.includes(d.avdeling);
      const matchesSeksjon =
        selectedDepartments.length === 0 ||
        selectedSections.length === 0 || selectedSections.includes(d.seksjon);
      const matchesKjonn = selectedKjonn.length === 0 || selectedKjonn.includes(d.kjonn);
      const matchesAlder = selectedAlder.length === 0 || selectedAlder.includes(d.aldersgruppe);
      const matchesAnsiennitet = selectedAnsiennitet.length === 0 || selectedAnsiennitet.includes(d.ansiennitetsgruppe);
      const matchesLederniva = selectedLederniva.length === 0 || selectedLederniva.includes(d.lederniva);
      const matchesStilling = selectedStilling.length === 0 || selectedStilling.includes(d.stillingsnavn);

      return (
        matchesAvdeling &&
        matchesSeksjon &&
        matchesKjonn &&
        matchesAlder &&
        matchesAnsiennitet &&
        matchesLederniva &&
        matchesStilling
      );
    });
  }, [
    rawData,
    selectedDepartments,
    selectedSections,
    selectedKjonn,
    selectedAlder,
    selectedAnsiennitet,
    selectedLederniva,
    selectedStilling,
  ]);

  const chartData = useMemo(() => {
    const groupKey = "avdeling";
    const map = new Map();

    filteredData.forEach((d) => {
      const key = d[groupKey]?.trim() || "Ukjent";
      const kjonn = d.kjonn?.trim() || "Ukjent";
      const antall = d.antall ?? 0;

      if (!map.has(key)) {
        map.set(key, { gruppe: key, kvinne: 0, mann: 0, ukjent: 0, total: 0 });
      }

      const entry = map.get(key);
      if (kjonn === "Kvinne") entry.kvinne += antall;
      else if (kjonn === "Mann") entry.mann += antall;
      else entry.ukjent += antall;

      entry.total += antall;
    });

    return Array.from(map.values()).map(({ gruppe, kvinne, mann, ukjent, total }) => ({
      gruppe,
      kvinne: total > 0 ? (kvinne / total) * 100 : 0,
      mann: total > 0 ? (mann / total) * 100 : 0,
      ukjent: total > 0 ? (ukjent / total) * 100 : 0,
    }));
  }, [filteredData]);

  const harValgteFilter = useMemo(() => (
    selectedDepartments.length > 0 ||
    selectedSections.length > 0 ||
    selectedKjonn.length > 0 ||
    selectedAlder.length > 0 ||
    selectedAnsiennitet.length > 0 ||
    selectedLederniva.length > 0 ||
    selectedStilling.length > 0
  ), [
    selectedDepartments,
    selectedSections,
    selectedKjonn,
    selectedAlder,
    selectedAnsiennitet,
    selectedLederniva,
    selectedStilling
  ]);

  const nullstillFilter = () => {
    setSelectedDepartments([]);
    setSelectedSections([]);
    setSelectedKjonn([]);
    setSelectedAlder([]);
    setSelectedAnsiennitet([]);
    setSelectedLederniva([]);
    setSelectedStilling([]);
  };

  const multiSelect = (
    label: string,
    options: string[],
    selected: string[],
    setSelected: (val: string[]) => void,
    noOptionsMessage?: string
  ) => (
    <div style={{ minWidth: "250px" }}>
      <Label style={{ display: "block", marginBottom: "0.25rem" }}>{label}</Label>
      <ReactSelect
        isMulti
        placeholder={`Velg ${label.toLowerCase()}...`}
        options={options.map((o) => ({ value: o, label: o }))}
        value={selected.map((o) => ({ value: o, label: o }))}
        onChange={(selectedOptions) => setSelected(selectedOptions.map((o) => o.value))}
        noOptionsMessage={() => noOptionsMessage || "Ingen alternativer"}
      />
    </div>
  );

  return (
    <div>
      <Heading level="2" size="medium">Statistikkfilter</Heading>

      <p  style={{marginBottom: "3rem" }}>
        Denne visningen gir deg oversikt over kjønnsfordeling i ulike grupper. Som standard ser du fordelingen mellom kvinner og menn per avdeling.
        Du kan selv bruke filtrene for å utforske fordelingen basert på kjønn, alder, ansiennitet, ledernivå, stilling og seksjon. For å se data per seksjon,
        må du først velge én eller flere avdelinger. Diagrammet oppdateres automatisk basert på valgene dine.
      </p>

      <div style={{ display: "flex", gap: "2rem", flexWrap: "wrap", marginBottom: "10rem", alignItems: "flex-end", }}>
        {multiSelect("Avdeling(er)", allDepartments, selectedDepartments, setSelectedDepartments)}

        {multiSelect(
          "Seksjon(er)",
          selectedDepartments.flatMap((dep) => sectionOptionsByDepartment[dep] || []),
          selectedSections,
          setSelectedSections,
          selectedDepartments.length === 0 ? "Velg avdeling(er) først..." : undefined
        )}

        {multiSelect("Kjønn", allOptions.kjonn, selectedKjonn, setSelectedKjonn)}
        {multiSelect("Alder", allOptions.alder, selectedAlder, setSelectedAlder)}
        {multiSelect("Ansiennitet", allOptions.ansiennitet, selectedAnsiennitet, setSelectedAnsiennitet)}
        {multiSelect("Ledernivå", allOptions.lederniva, selectedLederniva, setSelectedLederniva)}
        {multiSelect("Stilling", allOptions.stilling, selectedStilling, setSelectedStilling)}

        {harValgteFilter && (
          <div style={{ minWidth: "250px" }}>
            <Button variant="tertiary" onClick={nullstillFilter}>
              Nullstill filter
            </Button>
          </div>
        )}
      </div>

      {loading ? (
        <p>Laster data...</p>
      ) : (
        <ResponsiveContainer width="100%" height={400}>
          <BarChart data={chartData} margin={{ top: 20, right: 20, left: 20, bottom: 40 }}>
            <XAxis dataKey="gruppe" />
            <YAxis domain={[0, 100]} tickFormatter={(v) => `${v}%`} />
            <Tooltip formatter={(value: any) => `${value.toFixed(1)}%`} />
            <Bar dataKey="kvinne" stackId="a" name="Kvinner" fill="#339989" />
            <Bar dataKey="mann" stackId="a" name="Menn" fill="#232C3D" />
            <Bar dataKey="ukjent" stackId="a" name="Ukjent" fill="#D0D0D0" />
          </BarChart>
        </ResponsiveContainer>
      )}
    </div>
  );
}
