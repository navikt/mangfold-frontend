import { useState, useMemo } from "react";
import { Heading } from "@navikt/ds-react";
import {
    BarChart,
    Bar,
    XAxis,
    YAxis,
    Tooltip,
    ResponsiveContainer,
} from "recharts";
import "../css/KjonnPerSeksjonChart.css";
import { useKjonnData } from "../data/useKjonnData";
import { useAlderData } from "../data/useAlderData";

// Typing for alder entries with dynamic percent keys
interface AlderChartEntry {
    section: string;
    department: string;
    alderGrupper: Record<string, number>;
    [key: `percent_${string}`]: number;
}

type ViewType = "kjonn" | "alder";

const ViewDescriptions = {
    kjonn: "Her ser du kjønnsfordelingen per seksjon innenfor valgt avdeling.",
    alder: "Her ser du aldersfordelingen per seksjon innenfor valgt avdeling.",
};

function normalizeGender(f: number, m: number, u: number) {
    const total = f + m + u;
    if (total === 0) return { female: 0, male: 0, unknown: 0 };
    const rawF = (f / total) * 100;
    const rawM = (m / total) * 100;
    let female = Math.round(rawF);
    let male = Math.round(rawM);
    let unknown = 100 - female - male;
    return { female, male, unknown };
}

function CustomTooltip({ active, payload, label }: any) {
    if (!active || !payload || !payload.length) return null;
    const entry = payload[0].payload;
    const isGender = "femaleCount" in entry;

    return (
        <div style={{ background: "#2d3748", color: "white", padding: "1rem", borderRadius: "0.5rem" }}>
            <div style={{ fontWeight: 600, marginBottom: 8 }}>{label}</div>
            {isGender ? (
                <>
                    <div>Kvinne: {entry.femaleCount} ({entry.female}%)</div>
                    <div>Mann: {entry.maleCount} ({entry.male}%)</div>
                    {entry.unknownCount > 0 && (
                        <div>Ukjent: {entry.unknownCount} ({entry.unknown}%)</div>
                    )}
                </>
            ) : (
                Object.keys(entry.alderGrupper ?? {}).map(gruppe => (
                    <div key={gruppe}>
                        {gruppe}: {entry.alderGrupper[gruppe]} ({entry[`percent_${gruppe}`] ?? 0}%)
                    </div>
                ))
            )}
        </div>
    );
}

export default function FordelingEtterAvdelinger() {
    const [view, setView] = useState<ViewType>("kjonn");
    const [hovered] = useState<string | null>(null);
    const [selectedDepartment, setSelectedDepartment] = useState<string | null>(null);

    const { data: kjonnData, departments } = useKjonnData();
    const { data: alderData, aldersgrupper } = useAlderData();

    const department = selectedDepartment ?? departments?.[0] ?? "";

    const kjonnChartData = useMemo(() => {
        return kjonnData
            .filter(d => d.department === department)
            .map(entry => {
                const { female, male, unknown } = normalizeGender(entry.female, entry.male, entry.unknown);
                return {
                    ...entry,
                    female,
                    male,
                    unknown,
                    femaleCount: entry.female,
                    maleCount: entry.male,
                    unknownCount: entry.unknown,
                };
            });
    }, [kjonnData, department]);

    const alderChartData = useMemo(() => {
        return alderData
            .filter(d => d.department === department)
            .map(entry => {
                const total = Object.values(entry.alderGrupper).reduce((sum, cnt) => sum + cnt, 0);
                const percentages: Record<string, number> = {};
                aldersgrupper.forEach(gruppe => {
                    const val = entry.alderGrupper[gruppe] ?? 0;
                    percentages[`percent_${gruppe}`] = total > 0 ? Math.round((val / total) * 100) : 0;
                });
                return {
                    ...entry,
                    ...percentages,
                } as AlderChartEntry;
            });
    }, [alderData, department, aldersgrupper]);

    const sortedData = useMemo(() => {
        return view === "kjonn"
            ? [...kjonnChartData].sort((a, b) => b.female - a.female)
            : [...(alderChartData as AlderChartEntry[])].sort(
                (a, b) => (b[`percent_${aldersgrupper[0]}`] ?? 0) - (a[`percent_${aldersgrupper[0]}`] ?? 0)
            );
    }, [view, kjonnChartData, alderChartData, aldersgrupper]);

    // Høyde per rad for bedre plass til navn
    const barHeight = 44;
    const yAxisWidth = 260;

    return (
        <div>
            <Heading level="2" size="medium" spacing>
                Fordeling etter {view === "kjonn" ? "kjønn" : "alder"} – per seksjon
            </Heading>

            <p style={{ marginBottom: "1.5rem" }}>{ViewDescriptions[view]}</p>

            {/* Filter-knapper på egen linje */}
            <div style={{ marginBottom: "1.5rem", display: "flex", gap: "0.5rem" }}>
                <button
                    type="button"
                    onClick={() => setView("kjonn")}
                    style={{
                        border: "none",
                        background: view === "kjonn" ? "#e6f4ea" : "transparent",
                        color: view === "kjonn" ? "#157145" : "#334155",
                        fontWeight: view === "kjonn" ? "bold" : 500,
                        padding: "0.4em 1.4em",
                        borderRadius: 6,
                        cursor: "pointer",
                        boxShadow: view === "kjonn" ? "0 0 0 2px #38a169" : "none",
                        outline: "none",
                        fontSize: "1rem"
                    }}
                    aria-pressed={view === "kjonn"}
                >
                    Kjønn
                </button>
                <button
                    type="button"
                    onClick={() => setView("alder")}
                    style={{
                        border: "none",
                        background: view === "alder" ? "#e6f4ea" : "transparent",
                        color: view === "alder" ? "#157145" : "#334155",
                        fontWeight: view === "alder" ? "bold" : 500,
                        padding: "0.4em 1.4em",
                        borderRadius: 6,
                        cursor: "pointer",
                        boxShadow: view === "alder" ? "0 0 0 2px #38a169" : "none",
                        outline: "none",
                        fontSize: "1rem"
                    }}
                    aria-pressed={view === "alder"}
                >
                    Alder
                </button>
            </div>

            {/* Avdelingsvelger */}
            <div style={{ marginBottom: "2rem" }}>
                <strong>Velg én avdeling:</strong>
                <div style={{ display: "inline-flex", flexWrap: "wrap", gap: "2rem", marginLeft: 12 }}>
                    {departments.map(dept => (
                        <label key={dept} style={{ cursor: "pointer", fontWeight: department === dept ? "bold" : 500 }}>
                            <input
                                type="radio"
                                name="department"
                                value={dept}
                                checked={department === dept}
                                onChange={() => setSelectedDepartment(dept)}
                                style={{ marginRight: 4 }}
                            />
                            {dept}
                        </label>
                    ))}
                </div>
            </div>

            {/* Legend sentrert */}
            <div style={{
                display: "flex",
                justifyContent: "center",
                gap: 36,
                marginBottom: 16,
                fontWeight: 500,
                alignItems: "center"
            }}>
                {view === "kjonn" ? (
                    <>
                        <span className="dot dot-female" style={{ background: "#38a169" }} /> Kvinner
                        <span className="dot dot-male" style={{ background: "#1e293b" }} /> Menn
                        <span className="dot dot-unknown" style={{ background: "#999b9d" }} /> Ukjent
                    </>
                ) : (
                    aldersgrupper.map((g, i) => (
                        <span
                            key={g}
                            style={{
                                display: "inline-flex",
                                alignItems: "center",
                                gap: 4,
                                fontWeight: 500,
                                color: "#334155"
                            }}
                        >
                            <span
                                style={{
                                    width: 14,
                                    height: 14,
                                    borderRadius: "50%",
                                    background: ["#32bf66", "#208444", "#0e4d1b", "#a0aec0", "#f59e42"][i % 5],
                                    display: "inline-block"
                                }}
                            />
                            {g}
                        </span>
                    ))
                )}
            </div>

            {/* Bar chart med større rad-høyde og yAxis bredde */}
            <ResponsiveContainer width="100%" height={sortedData.length * barHeight + 60}>
                <BarChart

                    layout="vertical"
                    data={sortedData}
                    margin={{ top: 20, right: 60, bottom: 20, left: yAxisWidth }}
                    barCategoryGap={12}
                    barSize={barHeight}
                >
                    <XAxis type="number" domain={[0, 100]} tickFormatter={(v) => `${v}%`} />
                    <YAxis
                        type="category"
                        dataKey="section"
                        width={yAxisWidth}
                        tick={{ fontSize: 17, fontWeight: 500, fill: "#334155" }}
                    />
                    <Tooltip content={<CustomTooltip />} />
                    {view === "kjonn" ? (
                        <>
                            <Bar dataKey="female" stackId="a" fill="#38a169" fillOpacity={hovered === "female" || hovered === null ? 1 : 0.3} />
                            <Bar dataKey="male" stackId="a" fill="#1e293b" fillOpacity={hovered === "male" || hovered === null ? 1 : 0.3} />
                            <Bar dataKey="unknown" stackId="a" fill="#999b9d" fillOpacity={hovered === "unknown" || hovered === null ? 1 : 0.3} />
                        </>
                    ) : (
                        aldersgrupper.map((g, i) => (
                            <Bar
                                key={g}
                                dataKey={`percent_${g}`}
                                stackId="a"
                                fill={["#32bf66", "#208444", "#0e4d1b", "#a0aec0", "#f59e42"][i % 5]}
                                fillOpacity={hovered === g || hovered === null ? 1 : 0.3}
                            />
                        ))
                    )}
                </BarChart>
            </ResponsiveContainer>

            <p style={{ textAlign: "center", fontSize: "0.85rem", color: "#334155", marginTop: "0.5rem" }}>
                {view === "kjonn" ? "Andel kvinner (hover for antall)" : "Andel i hver aldersgruppe (hover for antall)"}
            </p>
        </div>
    );
}